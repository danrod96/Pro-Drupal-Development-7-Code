<?php
/**
 * @file 
 * An example module for using the Field API
 */

/**
 * Implements hook_field_info()
 *
 * Displays information about the custom field
 */
function color_example_field_info()
{
	return array(
		'color_example_rgb' => array(
			'label' => t('Example Color RGB'),
			'description' => t('Demostrates a field composed of RGB color.'),
			'default widget' => 'color_example_3text',
			'default_formatter' => 'color_example_simple_text'
		),
	);
}

/**
 * Implements hook_field_schema()
 *
 * Field schema for storing the field info
 */
function color_example_field_schema($field)
{
	$columns = array(
		'rgb' => array('type' => 'varchar', 'length' => 7, 'not null' => FALSE),
	);

	$indexes = array(
		'rgb' => array('rgb'),
	);

	return array(
		'columns' => $columns,
		'indexes' => $indexes,
	);
}

/**
 * Implements hook_field_validate()
 *
 * validates if it's a valid RGB Code
 */
function color_example_field_validate($entity_type, $entity, $field, $instance, $langcode, $items, &$errors)
{
	foreach ($items as $delta => $item) {
		if (!empty($item['rgb'])){
			//validation with regex
			if(! preg_match('@^#[0-9a-f]{6}$@', $item['rgb'])) {
				$errors[$field['field_name']][$langcode][$delta][] = array(
					'error' => 'color_example_invalid',
					'message' => t('Color must be in the HTML format #abcdef.'),
				);
			}
		}
	}
}

/**
 * Implements hook_field_is_empty()
 *
 * Defines if the field is empty or not
 */
function color_example_field_is_empty($item, $field)
{
	return empty($item['rgb']);
}

/**
 * Implements hook_field_formatter_info()
 *
 * Defines how the contents of the field are displayed
 */
function color_example_field_formatter_info()
{
	return array(
		//This formatter displays the text in the color indicated
		'color_example_simple_text' => array(
			'label' => t('Simple text-based formatter'),
			'field types' => array('color_example_rgb'),
		),
		//This formatter changes the background color 
		'color_example_color_background' => array(
			'label' => t('Change the background of the output text'),
			'field types' => array('color_example_rgb'),
		),
	);
}

/**
 * Implements hook_field_formatter_view()
 *
 */
function color_example_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display)
{
	$element = array();

	switch ($display['type']) {
		//This formatter outputs the field as a text with color
		case 'color_example_simple_text':
			foreach ($items as $delta => $item) {
				$element[$delta]['#markup'] = '<p style="color: ' . $item['rgb'] . '">' . t('The color of this event is @code', array('@code' => $item['rgb'])) . "</p>";
			}
			break;
		case 'color_example_color_background':
			//this formatter adds css to the page changing the '.region-content' background color.
			drupal_add_css('div.region-content { background-color:' . $item['rgb'] . ';}', array('type' => 'inline'));
			$element[$delta]['#markup'] = '<p>' . t('The color of this event is @code', array('@code' => $item['rgb']));
			break;
	}

	return $element;
}

/**
 * Implements hook_field_widget_info()
 *
 * Define the three widgets for displaying in the node edit page
 */
function color_example_field_widget_info()
{
	return array(
		'color_example_text' => array(
			'label' => t('RGB value as #ffffff'),
			'field types' => array('color_example_rgb'),
		),
		'color_example_3text' => array(
			'label' => t('RGB text fields'),
			'field types' => array('color_example_rgb'),
		),
		'color_example_colorpicker' => array(
			'label' => t('Color picker'),
			'field types' => array('color_example_rgb'),
		)
	);
}
/**
 * Implements hook_field_widget_form
 *
 * Defines how the widgets are displayed to the user in the node form
 */
function color_example_field_widget_form(&$form, &$form_state, $field, $instance, $langcode, $items, $delta, $element)
{
	$value = isset($items[$delta]['rgb']) ? $items[$delta]['rgb'] : '';

	$element += array('#delta' => $delta);

	$element['rgb'] = array();

	switch ($instance['widget']['type']) {
		case 'color_example_colorpicker':
			$element['rgb'] += array(
				'#suffix' => '<div class="field-example-colorpicker"></div>',
				'#attributes' => array('class' => array('edit-field-example-colorpicker')),
				'#attached' => array(
					// Add Farbtastic color picker.
					'library' => array(
						array('system', 'farbtastic'),
					),

					// Add javascript to trigger the colorpicker.
					'js' => array(drupal_get_path('module', 'color_example') . '/color_example.js'),
				),
			);
			break;

		case 'color_example_text':
			$element['rgb'] += array(
				'#title' => t('Events RGB Colour'),
				'#type' => 'textfield',
				'#default_value' => $value,
				//bigger size
				'#size' => 7,
				'#maxlength' => 7,
			);
			break;
		case 'color_example_3text':
			// Convert rgb value into r, g, and b for #default_value.
			if (isset($items[$delta]['rgb'])) {
				preg_match_all('@..@', substr($items[$delta]['rgb'], 1), $match);
			} else {
				$match = array(array());
			}

			// A fieldset to hold the three text fields.
			$element += array(
				'#type' => 'fieldset',
				'#element_validate' => array('color_example_3text_validate'),

				// The following is set so that the validation function will be able
				// to access external value information that otherwise would be
				// unavailable.
				'#delta' => $delta,
				'#attached' => array(
					'css' => array(drupal_get_path('module', 'color_example') . '/color_example.css')
				),
			);

			// Create a textfield for saturation values for Red, Green, and Blue.
			foreach (array('r' => t('Red'), 'g' => t('Green'), 'b' => t('Blue')) as $key => $title) {
				$element[$key] = array(
					'#type' => 'textfield',
					'#title' => $title,
					'#size' => 2,
					'#default_value' => array_shift($match[0]), '#attributes' => array('class' => array('rgb-entry')),
					'#description' => t('The 2-digit hexadecimal representation of the @color saturation, like "a1" or "ff"', array('@color' => $title)),

				);

			}

			break;

	}

	return $element;
}

/**
 * Validates data entered by the user
 */
function color_example_3text_validate($element, &$form_state)
{
	$delta = $element['#delta'];
	$field = $form_state['field'][$element['#field_name']][$element['#language']]['field'];
	$field_name = $field['field_name'];

	if (isset($form_state['values'][$field_name][$element['#language']][$delta])) {
		$values = $form_state['values'][$field_name][$element['#language']][$delta];

		foreach (array('r', 'g', 'b') as $colorfield) {
			$val = hexdec($values[$colorfield]);

			// If they left any empty, we'll set the value empty and quit.
			if (strlen($values[$colorfield]) == 0) {
				form_set_value($element, array('rgb' => NULL), $form_state);
				return;
			}

			// If they gave us anything that's not hex, reject it.
			if ( (strlen($values[$colorfield]) != 2) || $val < 0 || $val > 255) {
				form_error($element[$colorfield], t("Saturation value must be a 2-digit hexadecimal value between 00 and ff."));

			}

		}

		$value = sprintf('#%02s%02s%02s', $values['r'], $values['g'], $values['b']);
		form_set_value($element, array('rgb' => $value), $form_state);

	}
}

/**
 * Implements hook_field_error()
 *
 * Displays an error message when the user enters something incorrectly
 */
function color_example_field_widget_error($element, $error, $form, &$form_state)
{
	switch ($error['error']) {
		case 'color_example_invalid':
			form_error($element, $error['message']);
			break;
	}
}