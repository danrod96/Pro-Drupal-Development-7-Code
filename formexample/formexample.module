<?php
/**
 * @file
 *
 * Play with the Form API.
 */

/**
 * Implements hook_theme()
 */
function formexample_theme()
{
	return array(
		'formexample_nameform' => array(
			'render element' => 'form',
			'template' => 'formexample-nameform',
		),
	);
}

/**
 * Assign the elements of the form to variables so
 * the themer can use those values to control how the
 * form elements are displayed, or alternatively
 * displaying the whole form as constructed above.
*/
function template_preprocess_formexample_nameform(&$variables)
{
	$variables['formexample_nameform'] = array();
	$hidden = array();

	foreach (element_children($variables['form']) as $key) {
		$type = $variables['form'][$key]['#type'];
		if ($type == 'hidden' || $type == 'token'){
			$hidden[] = drupal_render($variables['form'][$key]);
		} else {
			$variables['formexample_nameform'][$key] = drupal_render($variables['form'][$key]);
		}

		//Hidden form elements have no value for themers
		$variables['formexample_nameform']['hidden'] = implode($hidden);

		//Collect all form elements to make it easier to print the whole form
		$variables['formexample_nameform_form'] = implode($variables['formexample_nameform']);
	}
}

/**
 * Implements hook_menu()
 */
function formexample_menu()
{
	$items['formexample'] = array(
		'title' => 'View the sample form',
		'page callback' => 'drupal_get_form',
		'page arguments' => array('formexample_nameform'),
		'access callback' => TRUE,
		'type' => MENU_NORMAL_ITEM,
	);

	return $items;
}

/**
 * Define a form
 */
function formexample_nameform($form, &$form_state)
{
	global $user;

	$form['#method'] = 'post';
	$form['#prefix'] = '<div class="formclass">';
	$form['#suffix'] = '</div>';
	$form['#attributes'] = array('class' => 'testclass2');
	$form['#attributes']['enctype'] = "multipart/form-data";

	$form['name'] = array(
		'#title' => t('Your name'),
		'#type' => 'fieldset',
		'#description' => t('What people call you.'),
		'#weight' => -2
	);

	$form['name']['user_name'] = array(
		'#title' => t('Your Name'),
		'#type' => 'textfield',
		'#description' => t('Please enter your name'),
		'#default_value' => 'Testname',
	);

	$form['color'] = array(
		'#prefix' => '<hr />',
		'#title' => t('Color'),
		'#type' => 'fieldset',
		'#suffix' => '<div class="privacy-warning">' . t('This information will be displayed publicly!') . '</div>',
 		'#description' => t('This fieldset contains the color field'),
		'#collapsible' => TRUE,
		'#collapsed' => FALSE
	);

	//color options
	$form['color_options'] = array(
		'#type' => 'value',
		'#value' => array(t('red'), t('green'), t('blue'), t('yellow'))
	);

	$form['color']['favourite_color'] = array(
		'#title' => t('Favourite Color'),
		'#type' => 'select',
		'#description' => t('Please select your favourite color'),
		'#options' => $form['color_options']['#value']
	);

	$form['country'] = array(
		'#title' => t('Country'),
		'#type' => 'textfield',
		'#description' => t('Enter your country.'),
		'#default_value' => 'Colombia',
	);

	//create a placeholder filled during the validation
	$form['country_code'] = array(
		'#type' => 'value',
		'#value' => ''
	);

	//Store the allowed choices in the form definition
	$allowed_flavors = array(t('spicy'), t('sweet'));

	$form['flavor'] = array(
		'#type' => 'textfield',
		'#title' => 'flavor',
		'#allowed_flavors' => $allowed_flavors,
		//special validator function
		'#element_validate' => array('formexample_flavor_validate')
	);

	//example of a text field
	$form['pet_name'] = array(
		'#title' => t('Name'),
		'#type' => 'textfield',
		'#description' => t('Enter your pet name'),
		'#maxlength' => 60,
	);

	//example of a password field
	$form['pass'] = array(
		'#type' => 'password_confirm',
		//'#title' => t('Password'),
		'#maxlength' => 60,
		'#size' => 15,
		'#required' => TRUE,
	);

	//example of a textarea field
	$form['pet_habits'] = array(
		'#title' => t('Habits'),
		'#type' => 'textarea',
		'#description' => t('Describe the habits of your pet'),
		'#cols' => 40,
		'#rows' => 6,
	);

	//example of a select with grouped options
	$options = array(
		array(
			t('Healthy') => array(
				1 => t('wagging'),
				2 => t('breathing'),
				3 => t('licking'),
			),
		),
		array(
			t('Not healthy') => array(
				4 => t('doing nothing'),
				5 => t('bleeding'),
				6 => t('oozing'),
			),
		),
	);

	$form['pet_tail'] = array(
		'#title' => t('Tail behaviour'),
		'#type' => 'select',
		'#description' => t('Pick one'),
		'#options' => $options,
		'#multiple' => FALSE,
	);

	//radio button example
	$form['date'] = array(
		'#type' => 'radios',
		'#title' => t('What month'),
		'#options' => array(
			t('March'),
			t('April'),
			t('May')
		),
		'#description' => t('Please choose a month for travelling')
	);

	//checkboxes example
	$options = array(
		'Test 1' => t('Run Test 1'),
		'Test 2' => t('Run Test 2'),
		'Test 3' => t('Run Test 3')
	);

	$form['tests'] = array(
		'#title' => t('Test Choice'),
		'#type' => 'checkboxes',
		'#description' => t('What kind of tests wanna run'),
		'#options' => $options,
		'#weight' => 25
	);

	//value sample
	$form['uid'] = array(
		'#type' => 'value',
		'#value' => $user->uid
	);

	//hidden sample
	$form['hiddenfield'] = array(
		'#type' => 'hidden',
		'#value' => t('Hidden value')
	);

	//date sample
	$form['deadline'] = array(
		'#title' => t('Deadline'),
		'#type' => 'date',
		'#description' => t('Please set the deadline.'),
		//'#default_value' => array(
		//),
	);

	//file upload sample
	$form['picture'] = array(
		'#type' => 'file',
		'#title' => t('Upload picture'),
		'#size' => 40,
		'#description' => t('Submit picture')
	);


	//AJAX example

	//get the list of manufacturers
	$options_first = _automobile_get_manufacturer_dropdown_options();

	// if we have a value for the manufacturer dropdown from
    // $form_state['values'] we use this both as the default value for
    // the first dropdown and also as a parameter to pass to the
    // function that retrieves the options for the second dropdown.
    $selected = isset($form_state['values']['manufacturer_dropdown']) ? $form_state['values']['manufacturer_dropdown'] : key($options_first);

    $form['manufacturer_dropdown'] = array(
    	'#type' => 'select',
    	'#title' => 'Manufacturer',
    	'#options' => $options_first,
    	'#default_value' => $selected,
		// bind an ajax callback to the change event (which is the default for the
		// select form type) of the manufacturer dropdown. It will replace the
		// model dropdown when rebuilt
		'#ajax' => array(
			'callback' => 'automobile_dependent_dropdown_callback',
			'wrapper' => 'dropdown_model_replace',
		),
    );

    $form['model_dropdown'] = array(
    	'#type' => 'select',
    	'#title' => 'Model',
		// The entire enclosing div created here gets replaced when manufacturer_dropdown
		// is changed..
		'#prefix' => '<div id="dropdown_model_replace">',
		'#suffix' => '</div>',
		// when the form is rebuilt during ajax processing, the $selected variable
		// will now have the new value and so the models will change
		'#options' => _automobile_get_model_dropdown_options($selected),
		'#default_value' => isset($form_state['values']['model_dropdown']) ? $form_state['values']['model_dropdown'] : ''
    );

	$form['submit'] = array(
		'#type' => 	'submit',
		'#value' => t('Submit Name')
	);

	return $form;
}

/**
 * Validate the form
 */
function formexample_nameform_validate($form, &$form_state)
{
	if (empty($form_state['values']['user_name'])){
		form_set_error('user_name', 'Name is empty.');
	}

	if ($form_state['values']['user_name'] == 'Testi'){
		form_set_error('user_name', 'Testi is not allowed to use the form.');
	}

	$country_code = formexample_find_country_code($form_state['values']['country']);

	if ($country_code){
		form_set_value($form['country_code'], $country_code, $form_state);
	}

	//In case you wanna rebuild the form again complete with the information you have entered
	//x$form_state['rebuild'] = TRUE;
}

/**
 * Implements hook_form_alter()
 * 
 * This form is used to alter any form on Drupal
 */
function formexample_form_alter(&$form, &$form_state, $form_id)
{
	//This code gets called for every form Drupal builds; use an if instance to respond to the form that
	//you need
	if ($form_id == 'user_login_block' || $form_id == 'user_login'){
		$form['warning'] = array(
			'#markup' => t('We log all login attempts'),
			'#weight' => -5,
		);

		//Change 'Log In' to 'Sign in'
		$form['submit']['#value'] = t('Sign in');
	}
}

function formexample_flavor_validate($element, $form_state)
{
	if (!in_array($form_state['values']['flavor'], $element['#allowed_flavors'])){
		form_error($element, t('You must enter spicy or sweet'));
	}
}

/**
 * Submit
 */
function formexample_nameform_submit($form, &$form_state)
{
	$name = $form_state['values']['user_name'];
	drupal_set_message(t('Thanks for filling out the form, %name', array('%name' => $name)));

	$color_key = $form_state['values']['favourite_color'];
	$color = $form_state['values']['color_options'][$color_key];

	$pet_name = $form_state['values']['pet_name'];

	$testschoice = array_filter($form_state['values']['tests']);

	$useruid = $form_state['values']['uid'];

	$hid = $form_state['values']['hiddenfield'];

	$dateline = $form_state['values']['deadline'];

	drupal_set_message(t('%name loves the colour %color!', array('%name' => $name, '%color' => $color)));

	drupal_set_message(t('Your country is %country', array('%country' => $form_state['values']['country_code'])));

	drupal_set_message(t('Your pet name is %pet_name', array('%pet_name' => $pet_name)));

	dpm($testschoice);

	dpm($useruid);

	dpm($form_state['values']['picture']);

	dpm($hid);

	dpm($dateline);

	dpm($form_state);
	dpm($form);
}

/**
 * Test function
 */
function formexample_find_country_code($country)
{
	switch ($country) {
		case 'Colombia':
			return 'CO';
			break;
		
		default:
			return 'NaN';
			break;
	}
}

/**
 * Selects just the model dropdown to be returned for re-rendering
 *
 * The version here has been re-loaded with a different set of options and
 * is sent back to the page to be updated.
 *
 * @return renderable array (the second dropdown)
 */
function automobile_dependent_dropdown_callback($form, $form_state) 
{
	return $form['model_dropdown'];
}

/**
 * Helper function to populate the manufacturer dropdown. This would normally be
 * pulling data from the database.
 *
 * @return array of options
 */

function _automobile_get_manufacturer_dropdown_options() 
{
	// drupal_map_assoc() just makes an array('Strings' => 'Strings'...).
	return drupal_map_assoc(array(t('Honda'), t('Toyota'), t('Ford'), t('Volkswagen')));
}

/**
 * Helper function to populate the model dropdown. This would normally be
 * pulling data from the database.
 *
 * @param key. This will determine which set of options is returned.
 *
 * @return array of options
 */
function _automobile_get_model_dropdown_options($key = '') 
{
	$options = array(

		t('Honda') => drupal_map_assoc(array(t('Accord'), t('Civic'), t('CRX'), t('Pilot'))),
		t('Toyota') => drupal_map_assoc(array(t('Camry'), t('Yaris'), t('Tundra'), t('Tacoma'))),
		t('Ford') => drupal_map_assoc(array(t('F-150'), t('Explorer'), t('Escape'), t('Edge'))),
		t('Volkswagen') => drupal_map_assoc(array(t('GTI'), t('Passat'), t('Jeta'), t('Polo'))),

	);

	if (isset($options[$key])) {
		return $options[$key];
	} else {
		return array();
	}

}