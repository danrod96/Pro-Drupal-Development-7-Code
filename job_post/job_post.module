<?php
/**
 * @file
 *
 * This file provides a content type called post job
 */

/**
 * Implements hook_node_info(), called by Drupal to see what node types are available
 */
function job_post_node_info()
{
	return array(
		'job_post' => array(
			'name' => t('Job Post'),
			'base' => 'job_post',
			'description' => t('Use this content type to post a job.'),
			'has_title' => TRUE,
			'title_label' => 'Job Title',
			'help' => t('Enter the job title, job description and the name of the company that posted a job'),
		),
	);
}

/**
 * Implements hook_menu_alter
 */
function job_post_menu_alter(&$callbacks)
{
	// If the user does not have 'administer nodes' permission,
	// disable the job_post menu item by setting its access callback to FALSE.
	if (!user_access('administer nodes')){
		$callbacks['node/add/job_post']['access callback'] = FALSE;
		unset($callbacks['node/add/job_post']['access arguments']);
	}
}

/**
 * Implements hook_permission
 */
function job_post_permission()
{
	return array(
		'create job post' => array(
			'title' => t('Create job post'),
			'description' => t('Create job post'),
		),
		'edit own job post' => array(
			'title' => t('Edit own job post'),
			'description' => t('Edit own job post'),
		),
		'edit any job post' => array(
			'title' => t('Edit any job post'),
			'description' => t('Edit any job post'),
		),
		'delete own job post' => array(
			'title' => t('Delete own job post'),
			'description' => t('Delete own job post'),
		),
		'delete any job post' => array(
			'title' => t('Delete any job post'),
			'description' => t('Delete any job post'),
		),
	);
}

/**
 * Implements hook_node_access()
 */
function job_post_node_access($op, $node, $account)
{
	$is_author = $account->uid == $node->uid;

	switch ($op) {
		case 'create':
			if (user_access('create job post', $account)){
				return NODE_ACCESS_ALLOW;
			}
			break;
		
		case 'update':
			if (user_access('edit own job post', $account) && $is_author || user_access('edit any job post', $account) ){
				return NODE_ACCESS_ALLOW;
			}
			break;

		case 'delete':
			if (user_access('delete own job post', $account) && $is_author || user_access('delete any job post', $account) ){
				return NODE_ACCESS_ALLOW;
			}
			break;
	}
}

/**
 * Implements hook_form() with the standard form
 */
function job_post_form($node, $form_state)
{
	return node_content_form($node, $form_state);
}

/**
 * Implements hook_validate()
 */
function job_post_validate($node)
{
	//Enforce a minimum character count of 2 on company names
	if (isset($node->job_post_company) && strlen($node->job_post_company['und'][0]['value']) < 2){
		form_set_error('job_post_company', 'Company name must have at least 2 chars', $limit_validation_errors = NULL);
	}
}

/**
 * Implements hook_insert(), which is called each time a node is inserted
 */
function job_post_insert($node)
{
	//log into watchdog
	watchdog('job_post', 'Job saved: ' . $node->title . ' for company ' . $node->job_post_company['und'][0]['value'] . ' was created by UID: ' . $node->uid, $variables = array(), WATCHDOG_NOTICE, $link = 'node/' . $node->nid);
}

/**
 * Implements hook_update(), which is called each time a node is updated
 */
function job_post_update($node)
{
	//log into watchdog
	watchdog('job_post', 'Job saved: ' . $node->title . ' for company ' . $node->job_post_company['und'][0]['value'] . ' was updated by UID: ' . $node->uid, $variables = array(), WATCHDOG_NOTICE, $link = 'node/' . $node->nid);
}

/**
 * Implements hook_delete(), which is called each time a node is deleted
 */
function job_post_delete($node)
{
	//log into watchdog
	watchdog('job_post', 'Job saved: ' . $node->title . ' for company ' . $node->job_post_company['und'][0]['value'] . ' was deleted by UID: ' . $node->uid, $variables = array(), WATCHDOG_NOTICE, $link = 'node/' . $node->nid);
}

/**
 * Implements hook_load()
 */
function job_post_load($nodes)
{
	// Add a new element to the node at load time for storing the
	// job posting sponsor information
	foreach ($nodes as $node) {
		$node->sponsor = "Sponsor info";
	}

	return $node;
}

/**
 * Implements hook_view()
 */
function job_post_view($node, $view_mode)
{
	//Theme the sponsor so it appears
	if ($view_mode == 'full'){
		$node->content['sponsor'] = array(
			'#markup' => theme('sponsor', array('sponsor' => $node->sponsor, 'sponsor_id' => $node->nid)),
			'#weight' => 100,
		);
	}

	return $node;
}

/**
 * Implements hook_theme()
 */
function job_post_theme()
{
	// define the variables and template associated with the sponsor field
	// The sponsor will contain the name of the sponsor and the sponsor_id
	// will be used to create a unique CSS ID
	return array(
		'sponsor' => array(
			'variables' => array('sponsor' => NULL, 'sponsor_id' => NULL),
			'template' => 'sponsor',
		),
	);
}
